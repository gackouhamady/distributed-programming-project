name: Build and deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2 : Se connecter à Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 3 : Build et push de l'image Docker
      - name: Build and push Docker image
        run: |
          IMAGE_NAME=user-service
          IMAGE_TAG=latest
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

      # Étape 4 : Configurer kubectl
      - name: Configure kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.22.0'

      # Étape 5 : Authentification à Google Cloud
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Étape 6 : Définir le cluster GKE
      - name: Set up GKE cluster
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}

      # Étape 7 : Mettre à jour le fichier de déploiement Kubernetes avec la nouvelle image
      - name: Update Kubernetes deployment
        run: |
          kubectl set image deployment/user-service   my-app=${{ secrets.DOCKER_USERNAME }}/user-service:latest
          kubectl rollout status deployment//user-service

      # Étape 8 : Appliquer le déploiement
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f k8s-service.yaml
